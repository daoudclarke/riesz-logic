% Our own version of BAL logic, using disjunction as the basis
assign(max_seconds, 30).


op(600, infix, "=>"). % Riesz space implication

assign(max_weight, 40).
assign(max_vars,5).
assign(not_weight, 100).

formulas(sos).

% Inference rule

P(x) & P(x => y) -> P(y)                      # label(MP).

P(x => y) -> P(x v z => y v z)                # label(RI).

% P(x => y) -> P(x v 0 => y v 0)                # label(BALPI).

% P(x => 0) -> P(x v 0 => 0) # label(BALPI).

%% % Property of conjunction
%% P(x => y) & P(x => z) -> P(x => y ^ z)        # label(C1).
%% P(x => y) -> P(x ^ y => x) & P(x => x ^ y)    # label(C2).

% Proven inference rules
%P((x => y) => z) & P(u => y) -> P((x => u) =>z). % proven
%P((x => y) => z) & P(x => u) -> P((u => y) =>z). % proven

% Godel's rule
%P(x) -> P(x ^ x)                     # label(G).

% Axioms for Riesz space logic

% These two together allow proof of first five BAL axioms
P((x => y) => ((y => z) => (x => z)))         # label(R1a).
P(((y => z) => (x => z)) => (x => y))         # label(R1b).

% Needed to prove BALPI and BALPa
P(x => x v y)                                 # label(R2).

% Needed to prove BALO
P(x v y => y v x)                             # label(R3).

%% % Adapted from BALP
P((x v y) v y => x v y)                       # label(R4).

% Definition of zero
P(0 => (z => z))                              # label(R5a).
P((z => z) => 0)                              # label(R5b).

%% % Adapted from BALO
P(((x => y) v 0 => (y => x) v 0) => (y => x)) # label(R6a).
P((y => x) => ((x => y) v 0 => (y => x) v 0)) # label(R6b).

%P((x => y) v ((y v z) => (x v z)))            # label(R7).
%P((x => y) v (y => x))                         # label(R7).
%P((x => 0) v x)                                # label(R7).


%% % Semilattice:
%% P(x => x ^ x)                                 # label(R5).
%% P((x ^ y) ^ z => x ^ (y ^ z))                 # label(R6).

%% % Distributivity of conjunction

%% P((x => y ^ z) => (x => y) ^ (x => z))        # label(R7a).
%% P((x => y) ^ (x => z) => (x => y ^ z))        # label(R7b).



%% % Definition of join

%% P(x v y => (((x => 0) ^ (y => 0)) => 0)) # label(Ja).
%% P((((x => 0) ^ (y => 0) => 0)) => x v y) # label(Jb).

%% %P(x ^ y => (((x => 0) v (y => 0)) => 0)).
%% %P((((x => 0) v (y => 0) => 0)) => x ^ y).

%% %% % Distributivity
%% P(x v (y ^ z) => (x v y) ^ (x v z)).
%% P((x v y) ^ (x v z) => x v (y ^ z)).

% New method for inference rules

%% % BALMP-
%% P(a).
%% P(a => 0).
%% P(a => b).
%% P((a => b) => 0).

%% %% % BALPI-
%% P(a => 0).

%% % BALG
%% P(a).
%% P(a => 0).
%% P(b).
%% P(b => 0).

% BALMI
% P((a => b) v 0).
P(((a => b) v 0) => 0).


end_of_list.

%% formulas(hints).

%% P(x) & P(x => y) -> P(y)                      # label(MP).
%% P(x => y) -> P(x v z => y v z)                # label(RI).
%% P((x => y) => ((y => z) => (x => z)))         # label(R1a).
%% P(((y => z) => (x => z)) => (x => y))         # label(R1b).
%% P(x => x v y)                                 # label(R2).
%% P(x v y => y v x)                             # label(R3).
%% P((x v y) v y => x v y)                       # label(R4).
%% P(0 => (z => z))                              # label(R5a).
%% P((z => z) => 0)                              # label(R5b).
%% P(((x => y) v 0 => (y => x) v 0) => (y => x)) # label(R6a).
%% P((y => x) => ((x => y) v 0 => (y => x) v 0)) # label(R6b).
%% P(a).
%% P(a => 0).
%% P(a => b).
%% P((a => b) => 0).
%% P(b => 0)  # label(BALMP).

%% end_of_list.

formulas(goals).

% Show that we can deduce assertions of positivity
%P((x => 0) v 0) & P(((x => 0) v 0) => 0) -> P(x)   # label(POS).
%P((x => 0) v 0) -> P(x)   # label(POS).
%P(((x => 0) v 0) => 0) -> P(x)   # label(POS).
%P(((x => y) v 0) => 0) -> P(y => x) # label(POS).

% BAL axioms. These come in pairs since we are asserting positivity
% rather than equality to zero.

% Proven: -----------------------------------------------------

%% P((x => y) => ((z => x) => (z => y))) # label(BALBa). 
%% P(((z => x) => (z => y)) => (x => y)) # label(BALBb).

%% P((x => (y => z)) => (y => (x => z))) # label(BALC).

%% P(((x => y) => y) => x) # label(BALNa).
%% P(x => ((x => y) => y)) # label(BALNb).

%% P(x v 0 => ((x v 0) v 0)) # label(BALPa).
%% P(((x v 0) v 0) => x v 0) # label(BALPb).

% Assumed:

%% P(((x => y) v 0 => (y => x) v 0) => (y => x)).
%% P((y => x) => ((x => y) v 0 => (y => x) v 0)).

% Towards BALPI
%P(x => y) -> P(x v z => y v z).
%% y - x <= (y v z - x v z) = (y - (x v z)) v (z - (x v z)) = ((y - x) v (y - z)) v -((x - z) v (z - z))
%% Not valid:
%% 5 - 3 <= 5 v 7 - 3 v 7 = 0                                                         = 

% BAL inference rules

% Unproven

%P(x) & P(x => 0) -> P(x v 0) & P(x v 0 => 0) # label(BALPI).
%P(x => 0) -> P(x v 0 => 0) # label(BALPI).
%P(x => 0) & P(x) -> P(x v 0 => 0) #label(BALPI). 
%P(x => y) -> P(x v z => y v z).
%(P(x) -> P(y)) -> (P(x => 0) -> P(y => 0)).

% New proof method for inference rules


%% P(b => 0)  # label(BALMP).
%% P(a v 0 => 0) # label(BALPI).
%% P(a => b) # label(BALG1).
%% P((a => b) => 0) # label(BALG2).
%% P(((a v 0) => (b v 0)) v 0) # label(BALMI1).
%% P(((a v 0) => (b v 0)) v 0 => 0) # label(BALMI2).

% BALMI part 1
P(b => a).

% Proven:

%P(x) -> P(x v 0) # label(BALPI).
%P(x => 0) -> P(x v 0 => 0) #label(BALPI). 

% P(x) & P(x => y) -> P(y)                                     # label(MP).     % Assumed
%P(x) & P(x => 0) & P(x => y) & P((x => y) => 0) -> P(y) & P(y => 0) # label(BALMP).
% P((x => y) v 0) -> P((x v 0 => y v 0) v 0)                   # label(BALMI).
% P((x => y) v 0) & P((x => y) v 0 => 0) -> P((x v 0 => y v 0) v 0) & P((x v 0 => y v 0) v 0 => 0)        # label(BALMI).
% P(y => x) -> P((x v 0 => y v 0) v 0 => 0)        # label(BALMI).
% Simplified using x => 0 implies x v 0 => 0 (proven)
%P(y => x) -> P((x v 0 => y v 0) => 0)        # label(BALMI).
%P((x => y) v 0 => 0) -> P((x v 0 => y v 0) v 0 => 0)        # label(BALMI).
%P(x => y) -> P(x v 0 => y v 0)                               #label(BALMI).
% P(x) & P(x => 0) & P(y) & P(y => 0) -> P(x => y) & P(y => x) # label(BALG).

% Towards BALMI (proven)
% P((x => y) v 0 => 0) -> P(y => x).

% Other goals we are interested in

% Half of BALMI is pointless
% P((x v 0 => y v 0) v 0).

% If something is negative, its positive part is zero (proven)
%P(x => 0) -> P(x v 0 => 0).

% Associativity of addition (proven)
% P(((((x => 0) => y) => 0) => z) => ((x => 0) => ((y => 0) => z))).

% Positivity of positive part
% P(x v 0).

% Disjunction with negation is positive (unproven)
%P((x => y) v (y => x)).
%P((x => 0) v x).

% P(0 => x) -> P(x).
% P(x => y) -> P((y => 0) => (x => 0)).

%% % Associativity - not proven
%% P((x v y) v z => x v (y v z)).
%% P(x v (y v z) => (x v y) v z).

% Property of disjunction - not proven
%P(x => y) & P (z => y) -> P(x v z => y).



% Commutativity
%P(x ^ y => y ^ x)                             # label(BL3).

% Property of conjunction
%P(x => y) & P(x => z) -> P(x => y ^ z)        # label(C).
%P(x ^ y) -> P(x) & P(y).

% Semilattice:
%P(x => x ^ x)                                 # label(R5).
%P(x ^ y => (x ^ y) ^ y).
%P((x ^ y) ^ z => x ^ (y ^ z))                 # label(R6).
%P(x ^ y => x) & P(x => x ^ y) -> P(x => y).
%P(x => y) -> P(x ^ y => x) & P(x => x ^ y).

%P(0).

% Extended MP

%P((x => y) => z) & P(u => y) -> P((x => u) =>z). % proven
%P((x => y) => z) & P(x => u) -> P((u => y) =>z). % proven

% Towards unproven BAL axiom:
%P((x => y) ^ 0 => ((y => x) v 0 => 0)).
%P(((x ^ 0) => 0) => (((x => 0) v 0) => 0)).
%P((((y => x) ^ 0) => 0) => ((x => y) v 0)).
%P(((x => y) ^ 0 => (((x => y) ^ 0) => 0)) => (y => x)).

% Properties of join
%P(x => x v y).

% Negation
%P(((x => y) => 0) => (y => x)).
%P((y => x) => ((x => y) => 0)).

% Lattice theoretic - absorption
%P(x => x ^ x).
%P(x ^ (x v y) => x).
%P(x => x ^ (x v y)).
%P(x v (x ^ y) => x).
%P(x => x v (x ^ y)).

%% P((z => (x ^ y)) => ((z => x) ^ (z => y))) # label(R1a).
%% P(x ^ y => (x ^ y) ^ y).
%% P((x v y) v y => x v y).
%% P(x => x ^ x).
%% P(((x => y) => (z => u)) => ((u => z) => (y => x))).
%% P(((x => 0) => 0) => x).

%% % Lattice-theoretic property
%P(x => y) -> P(z ^ x => z ^ y).

%% % Distributivity of conjunction
%P((x => y ^ z) => (x => y) ^ (x => z)).

% Associativity
%P((x ^ y) ^ z => x ^ (y ^ z)).

%% % Double negation - Proved
%% P(((x => y) => y) => x).
%% P(x => ((x =>y) => y)).

%P((x => 0) => 0) -> P(x).

% Other properties of join

%P((x v y => 0) => (x => 0) ^ (y => 0)).
%P((x => 0) ^ (y => 0) => (x v y => 0)).
%P((((x => 0) => 0) v ((y => 0) => 0) => 0) => (x v y => 0)).
%P(x ^ y => (((x => 0) v (y => 0)) => 0)).
%P((((x => 0) v (y => 0) => 0)) => x ^ y).

%P((x => 0) v (y => 0) => (((x => 0) => 0) ^ ((y => 0) => 0) => 0)).
%P((((x => 0) => 0) ^ ((y => 0) => 0) => 0) => ((x => 0) => 0) ^ (y => 0)).

%P(x ^ ((y => 0) => 0) => x ^ y).
%P(x => y) -> P(z ^ x => z ^ y).
%P((x => y) => (z ^ x => z ^ y)).

%P(x ^ y => (((x => 0) v (y => 0)) => 0)).
%P((((x => 0) v (y => 0) => 0)) => x ^ y).

% Adapted from BAL
%P(x ^ y => (x ^ y) ^ y).

%P(x ^ y => x)                         # label(BL2).

% Do we need a definition of zero?
%P((x => x) => (y => y)).

% Simple negation of one of our rules
%P((x => 0) ^ (y => 0) => (x => 0)).


% Idempotence of + operator
%P((x => 0) ^ 0 => ((x => 0) ^0) ^ 0).
%P((((x => 0) ^0) ^ 0 => 0) => ((x => 0) ^ 0 => 0)).
%P((((x => 0) ^ 0) v 0 => 0) => x v 0).
%P((((x => 0) ^ 0) v 0 => 0) => x v 0).
%P(((((x => 0) => 0) v (0 => 0)) => 0) v 0 => 0).

% A different route
%P((x ^ y) => (x ^ y) ^ y).
%P(((x => 0) v (y => 0) => 0) => x ^ y).
%P(((x => 0) v (y => 0) => 0) => (x ^ y) ^ y).
%P((x ^ y) ^ y => (((x ^ y) => 0) v (y => 0) => 0)).
%P((x ^ y) ^ y => ((((x => 0) v (y => 0)) v (y => 0)) => 0)).
%P( ((x => 0) v (y => 0) => 0) => ((((x => 0) v (y => 0)) v (y => 0)) => 0)).

% Proven with monotonicity of conjunction condition
%P(((x v 0) v 0) => x v 0).

end_of_list.
